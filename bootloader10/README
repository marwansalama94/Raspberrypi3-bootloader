
This example is for the pi3

This is a very simple bootloader.  Instead of the sd dance (see
top level README), this makes life a bit simpler and greatly reduces
physical wear and tear on the sd card socket.  Do the sd card dance one
more time with this kernel.img.  Get some sort of serial solution to
connect a dumb termial program with the ability to download raw/ascii
files.

On the sd card end of the board the P1 connector pins are like this,
same as other raspberry pi boards, but span the whole length of the
board rather than orentied more toward one corner than another.

|SD  |  12
|CARD|  34
        56
        78
        9.
        ..
        ..

The pins we care about

2
4
6
8  TX out
10 RX in

The pi TX goes to the uart RX and the pi RX to the uart TX.

Here are some examples of 3.3V level uarts, you need 3.3V level not 5V
definitely not RS-232C


There are a pair of holes on the board labelled RUN.  If you are able
to solder or find other solutions (there are pins that can be pushed
into holes like this), you can put a momentary switch that when closed
will reset the board, and released allow it to boot again.  Then you
can use this bootloader again by simply pressing the reset button.
Much easier than power cycling the board every time (turning the power
off, then on by unplugging the usb).

These two lines in vectors.s determine the size of the programs this
can handle

First off 0x200000 is close to where this program begins so if you use
this bootloader for larger programs you will overwrite the bootloader
while running and crash.  Make that number larger.

.space 0x200000-0x8020,0

If you approach this number

skip:
    mov sp,#0x08000000

Where the stack lives for this program, then you need to move that up
as well.

Oh, and this line too, this limits the overall size of the program
if you run into this then just make it bigger as well.

    ram : ORIGIN = 0x0000, LENGTH = 0x1000000

I normally do not deliver binaries.  In this case I have provided
a bootloader.img file in the aarch64 directory built from this
directory.

As of this writing for this to work you must in addition to the other
files (bootcode.bin, start.elf, the kernel8.img from here) and a
config.txt containing

arm_control=0x200
kernel_old=1
disable_commandline_tags=1

The bit set in arm_control indicates boot 64 bit not 32 bit.  This
is no longer needed the filename kernel8.img tells the GPU that this
is a 64 bit binary.

kernel_old tells the bootloader to not provide any boot code for the
ARM (as of this writing that code is 32 bit instructions so wont work).

disable_commandline_tags prevents the GPU from writing ATAGS to
memory, since our program starts at 0x0000000, this corrupts our
program if we let it.  Otherwise we need to leave a gap in our
program to make room for the ATAGs.

This means we have to build our program for address 0x0000 not address
0x80000 like we would normally.  This also means we have to deal with
the other four cores.  When all the affinity bits are zero in the
MPIDR_EL1 register, that is the master core.  For now I put the other
cores in an infinite loop.

This code will allow core 0 to keep going and block the others.

    mrs x0,mpidr_el1
    mov x1,#0xC1000000
    bic x0,x0,x1
    cbz x0,zero
not_zero:
    wfi
    b not_zero
zero:
